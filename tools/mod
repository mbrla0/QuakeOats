#!/usr/bin/env python3
# tools/mod - Creates a model data file from a given Wavefront OBJ file.

import sys
if len(sys.argv) != 2:
	print("Usage: {} <model>".format(sys.argv[0]), file = sys.stderr)
	sys.exit(1)

import json
with open("assets/textures.json", "r") as f:
	tmap = json.load(f)

import pywavefront as pw
model = pw.Wavefront(sys.argv[1])

for name, material in model.materials.items():
	if not material.texture is None:
		tname = material.texture.name
		tindx = tmap.index(tname) + 1
	else:
		tindx = 0
	
	import os.path
	path = os.path.splitext(sys.argv[1])[0] + ".{}.mod".format(name)

	target = open(path, "wb")
	
	import struct
	header = struct.pack("<III",
		0, # Use the TriangleList primitive assembler.
		int(len(material.vertices) / 8), # Number of vertices.
		int(len(material.vertices) / 8)) # Number of indices.
	target.write(header)

	for i in range(int(len(material.vertices) / 8)):
		point = struct.pack("<Ifffffffff",
			tindx,
			material.vertices[i * 8 + 0], # Texture I
			material.vertices[i * 8 + 1], # Texture J
			material.vertices[i * 8 + 2], # Normal X
			material.vertices[i * 8 + 3], # Normal Y
			material.vertices[i * 8 + 4], # Normal Z
			material.vertices[i * 8 + 5], # Position X
			material.vertices[i * 8 + 6], # Position Y
			material.vertices[i * 8 + 7], # Position Z
			1.0)                          # Position W
		target.write(point)
	for i in range(int(len(material.vertices) / 8)):
		index = struct.pack("<I", i)
		target.write(index)
	target.close()
